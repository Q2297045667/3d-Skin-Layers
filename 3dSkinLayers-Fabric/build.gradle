plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'maven-publish'
	id "com.github.johnrengelman.shadow" version "7.1.0"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
    maven { url 'https://jitpack.io' } //fabric asm
    maven {
        url "https://repo.codemc.io/repository/maven-public/"
    }
    //mavenLocal() // comment out for local testing
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

project.evaluationDependsOn(':3dSkinLayers-Shared')

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	modImplementation "curse.maven:modmenu-308702:${rootProject.mod_menu_release}"

	sourceSets.main.java.srcDirs += (project(':3dSkinLayers-Shared').sourceSets.main.java.srcDirs)
	sourceSets.main.resources.srcDirs += (project(':3dSkinLayers-Shared').sourceSets.main.resources.srcDirs)
	
}

minecraft {
	refmapName = "3dskinlayers.refmap.json"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 16;
	options.forkOptions.jvmArgs.addAll("--enable-preview")
}

shadowJar {
   relocate 'dev.tr7zw.modlib', 'dev.tr7zw.skinlayers.modlib'
   configurations = []
}

tasks.getByName("remapJar") {
	dependsOn("shadowJar")
	mustRunAfter("shadowJar")
	input  = tasks.getByName("shadowJar").archivePath
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

jar {
	from {
		duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}
